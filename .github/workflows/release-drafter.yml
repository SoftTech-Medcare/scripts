name: Release Manager

on:
  push:
    # branches to consider in the event; optional, defaults to all
    branches:
      - main
      # - release/*
  workflow_call:
    inputs:
      config-name:
        description: 'The name of the configuration file for release automation'
        required: false
        type: string
      version:
        description: 'The desired version for the release'
        required: false
        type: string
    outputs:
      resolved_version:
        description: 'Automatically generated release version'
        value: ${{ jobs.update_release_draft_publish.outputs.resolved_version }}
      tag_name:
        description: 'Automatically generated tag name'
        value: ${{ jobs.update_release_draft_publish.outputs.tag_name }}

permissions:
  contents: read

jobs:
  update_release_draft_publish:
    # remove this line (if:..) when copy to another repo
    if: ${{ github.repository != 'SoftTech-Medcare/scripts' }}
    outputs:
      resolved_version: ${{ steps.release.outputs.resolved_version }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      # (Optional) GitHub Enterprise requires GHE_HOST variable set
      #- name: Set GHE_HOST
      #  run: |
      #    echo "GHE_HOST=${GITHUB_SERVER_URL##https:\/\/}" >> $GITHUB_ENV

      # Determine whether to publish the release draft based on the branch name
      - name: Set Publish Variable
        id: set-publish
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "PUBLISH=true" >> $GITHUB_ENV
          else
            echo "PUBLISH=false" >> $GITHUB_ENV
          fi
        shell: bash
      - name: Set base branch
        id: set_base_branch
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "BASE_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
          else
            echo "BASE_BRANCH=${{ github.ref }}" >> $GITHUB_ENV
          fi
      - name: Set config file name
        id: set_config_name
        run: |
          if [ "${{ inputs.config-name }}" ]; then
            echo "CONFIG=${{ inputs.config-name }}" >> $GITHUB_ENV
          else
            echo "CONFIG=release-drafter.yml" >> $GITHUB_ENV
          fi
      - name: Set version
        id: set_version
        run: |
          VERSION_REGEX='[0-9]+(\.[0-9]+)+([-a-zA-Z0-9.]*)?'
            
          if [[ "${{ inputs.version }}" =~ $VERSION_REGEX ]]; then
            echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=" >> $GITHUB_ENV
          fi

      # Drafts your next Release notes as Pull Requests are merged into "main" or "release/*"
      - name: write release
        id: release
        uses: release-drafter/release-drafter@v6
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        with:
          # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
          config-name: ${{ env.CONFIG }}
          version: ${{ env.VERSION }}
          # disable-autolabeler: true
          publish: ${{ env.PUBLISH }}
          commitish: ${{ env.BASE_BRANCH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}